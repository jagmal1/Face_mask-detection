# -*- coding: utf-8 -*-
"""face-mask-detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1arocqzFUssvYgEKVafItOUXWTMpQrTUU
"""

!pip install -q kaggle

from google.colab import files
files.upload()

#creating a kagggle folder
!mkdir ~/.kaggle

#copy the kaggle.json to folder created
!cp kaggle.json ~/.kaggle/

#permission for json to act
! chmod 600 ~/.kaggle/kaggle.json

#APT fatch & unzip
!kaggle datasets download -d omkargurav/face-mask-dataset -p /content/face_mask_dataset --unzip

#creatint a list that contain
import os

dataset_path = "/content/face_mask_dataset"
print("Files in dataset folder:", os.listdir(dataset_path))

!ls

# list with mask
filenames_with_mask= os.listdir('/content/face_mask_dataset/data/with_mask')
print(filenames_with_mask)

#list without mask
filenames_without_mask = os.listdir("/content/face_mask_dataset/data/without_mask")
print(filenames_without_mask)

#counting no of file in each directory
no_of_with_mask=len(filenames_with_mask)
no_of_without_mask=len(filenames_without_mask)
print('Number of images with mask', no_of_with_mask)
print('Number of images without mask', no_of_without_mask)

"""Importing the dependencies

"""

import numpy as np
from PIL import Image #importing image from pillow library
import matplotlib.image as mpimg  # used for ploting graphs
import matplotlib.pyplot as plt
import sklearn
#from sklearn.modern_selection import train_test_split

from sklearn import model_selection

#!pip install -U scikit-learn

from sklearn.model_selection import train_test_split

"""Creating labels for two class of images"""

with_mask_labels=[1]*3725
print(with_mask_labels)

len(with_mask_labels)

without_mask_labels=[0]*3828
print(without_mask_labels)
len(without_mask_labels)

labels = with_mask_labels + without_mask_labels
print(labels)

print(len(labels))

"""1 for with mask

0 for without mask

Understanding the image **dataset**
"""

# displaying the images with wearing masks
img=mpimg.imread('/content/face_mask_dataset/data/with_mask/with_mask_1007.jpg')
plt.imshow(img)

# displaying the images without wearing masks
img=mpimg.imread('/content/face_mask_dataset/data/without_mask/without_mask_1007.jpg')
plt.imshow(img)

"""** Now making images in one dimension

Resizinf all images and saving these image sin different folders
"""

# creating empty directories for resized images
os.mkdir('with_mask_resized') # mkdir for making directories
os.mkdir('without_mask_resized')

# #resized with mask images

# with_mask_folder = '/content/face_mask_dataset/data/with_mask/'
# with_mask_resized_folder = '/content/with_mask_resized/'

# for filename in os.listdir(with_mask_folder):

#   img_path = with_mask_folder+filename
#   img = Image.open(img_path)
#   img = img.resize((128,128))
#   img = img.convert('RGB')

# newImgPath = with_mask_resized_folder+filename
# img.save(newImgPath)

#resized with mask images

with_mask_folder ='/content/face_mask_dataset/data/with_mask/'
with_mask_resized_folder='/content/with_mask_resized/'

for filename in os.listdir(with_mask_folder):

  img_path = with_mask_folder+filename
  img = Image.open(img_path)

  img = img.resize((128,128))   # Image.Resampling.LANCZOS
  img = img.convert('RGB')

  newImgPath = with_mask_resized_folder+filename
  img.save(newImgPath)

#resized without mask images

without_mask_folder ='/content/face_mask_dataset/data/without_mask/'
without_mask_resized_folder='/content/without_mask_resized/'

for filename in os.listdir(without_mask_folder):

  img_path = without_mask_folder+filename
  img = Image.open(img_path)

  img = img.resize((128,128))
  img = img.convert('RGB')

  newImgPath = without_mask_resized_folder+filename
  img.save(newImgPath)

"""Resized Images"""

img=mpimg.imread('/content/without_mask_resized/without_mask_1007.jpg')
plt.imshow(img)

img=mpimg.imread('/content/with_mask_resized/with_mask_1007.jpg')
plt.imshow(img)

"""**Converting image to numpy array**"""

import cv2
import glob #library for image recognition

#reading with mask images
imdir='/content/with_mask_resized/'
#imlist=glob.glob(imdir+'*.jpg')
ext=['jpg','png']
files=[]
[files.extend(glob.glob(imdir+'*.' + e)) for e in ext]

with_mask_images = np.asarray([cv2.imread(file) for file in files])

#reading without mask images
imdir='/content/without_mask_resized/'

ext=['jpg','png']
files=[]
[files.extend(glob.glob(imdir+'*.' + e)) for e in ext]

without_mask_images = np.asarray([cv2.imread(file) for file in files])

print(with_mask_images)

print(without_mask_images)

print(with_mask_images.shape)
print(without_mask_images.shape)

combined_images=np.concatenate((with_mask_images,without_mask_images))
print(combined_images.shape)

from re import X
#data & labels
X=combined_images
Y=np.asarray(labels)

"""Spliting Taining data & Test data"""

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=2)

print(X.shape,X_train.shape,X_test.shape,Y_train.shape,Y_test.shape)

#Normalizing/Standardizing the data

X_train_sd = X_train/255
Y_train_sd = Y_train/255
X_test_sd = X_test/255
Y_test_sd = Y_test/25

print(X_train_sd)

print(X_train_sd[0])

"""Building the Neural Netwaork"""

import tensorflow as tf
import keras

model = keras.Sequential([

                          keras.layers.Flatten(input_shape=(128,128,3)),
                          keras.layers.Dense(128,activation='relu'),
                          keras.layers.Dense(128,activation='relu'),
                          keras.layers.Dense(128,activation='relu'),
                          keras.layers.Dense(2,activation='softmax')
])

model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])

model.fit(X_train_sd,Y_train,epochs=30)

score,acc=model.evaluate(X_test_sd,Y_test)
print('Test data loss:',score)
print('Test accuracy:',acc)

"""Building a Predictive System"""

from google.colab.patches import cv2_imshow # imshow does not work with google.colab so we import cv2_imshow

imput_image_path = input('Path of the image to be predictec:')
imput_image = cv2.imread(imput_image_path)
cv2_imshow(imput_image)

input_image_resized = cv2.resize(imput_image,(128,128))
input_image_scaled = input_image_resized/255

input_image_reshaped = np.reshape(input_image_scaled,[1,128,128,3])

input_prediction = model.predict(input_image_reshaped)

input_pred_label = np.argmax(input_prediction)

if input_pred_label == 1:
  print('The person is wearing mask')
else:
  print('The person is not wearing mask')

imput_image_path = input('Path of the image to be predictec:')
imput_image = cv2.imread(imput_image_path)
cv2_imshow(imput_image)

input_image_resized = cv2.resize(imput_image,(128,128))
input_image_scaled = input_image_resized/255

input_image_reshaped = np.reshape(input_image_scaled,[1,128,128,3])

input_prediction = model.predict(input_image_reshaped)

input_pred_label = np.argmax(input_prediction)

if input_pred_label == 1:
  print('The person is wearing mask')
else:
  print('The person is not wearing mask')